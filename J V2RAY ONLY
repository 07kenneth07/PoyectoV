[{"ConfigVersion":"2.8","vmess":"cronoksjsongen"},{"Name":"ENTEL TELE","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiJ2Mi56b3BpbS5jb20iLCJhaWQiOiIwIiwiaG9zdCI6InYycmF5Lmplbmtlbi12cG4uY29tIiwiaWQiOiI3YzlkNDE3Ni01YWI4LTExZWMtYjc5OS0yNDE0ODgyNDJhZGQiLCJuZXQiOiJ3cyIsInBhdGgiOiIvOHdXZEJIbVUvIiwicG9ydCI6IjgwODAiLCJwcyI6IltFTlRFTF0gWyDwn4en8J+HtCBURUxFRURVQ0FDSU9OIPCfh6jwn4exIF0iLCJzY3kiOiJhdXRvIiwic25pIjoiIiwidGxzIjoiIiwidHlwZSI6IiIsInYiOiIyIn0="},{"Name":"ENTEL TELE","Flag":"us","vmess":"vmess:\/\/eyJhZGQiOiIxMDQuMTYuMTAzLjEzOSIsImFpZCI6IjAiLCJob3N0IjoidjJyYXkuMDdrZW5uZXRoMDcueHl6IiwiaWQiOiI4YTkyMTQ5MS0yYTYyLTExZWMtOWRiNS1jZWI2M2E2Y2NiMzMiLCJuZXQiOiJ3cyIsInBhdGgiOiIvenJZNWxESksvIiwicG9ydCI6IjgwODAiLCJwcyI6IltFTlRFTF0gWyDwn4en8J+HtCBURUxFRURVQ0FDSU9OIPCfh7rwn4e4IF0iLCJzY3kiOiJhdXRvIiwic25pIjoiIiwidGxzIjoiIiwidHlwZSI6IiIsInYiOiIyIn0="},{"Name":"VIVA SIN SALDO","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiJ3aG8uaW50IiwiYWlkIjoiMCIsImhvc3QiOiJ2MnJheS5qZW5rZW4tdnBuLmNvbSIsImlkIjoiN2M5ZDQxNzYtNWFiOC0xMWVjLWI3OTktMjQxNDg4MjQyYWRkIiwibmV0Ijoid3MiLCJwYXRoIjoiLzh3V2RCSG1VLyIsInBvcnQiOiI4MDgwIiwicHMiOiJbVklWQV0gWyDwn4en8J+HtCBTSU4gU0FMRE8g8J+HqPCfh7EgXSIsInNjeSI6ImF1dG8iLCJzbmkiOiIiLCJ0bHMiOiIiLCJ0eXBlIjoiIiwidiI6IjIifQ=="},{"Name":"VIVA SIN SALDO","Flag":"us","vmess":"vmess:\/\/eyJhZGQiOiJ3aG8uaW50IiwiYWlkIjoiMCIsImhvc3QiOiJ2MnJheS4wN2tlbm5ldGgwNy54eXoiLCJpZCI6IjhhOTIxNDkxLTJhNjItMTFlYy05ZGI1LWNlYjYzYTZjY2IzMyIsIm5ldCI6IndzIiwicGF0aCI6Ii96clk1bERKSy8iLCJwb3J0IjoiODA4MCIsInBzIjoiW1ZJVkFdIFsg8J+Hp\/Cfh7QgU0lOIFNBTERPIPCfh7rwn4e4IF0iLCJzY3kiOiJhdXRvIiwic25pIjoiIiwidGxzIjoiIiwidHlwZSI6IiIsInYiOiIyIn0="},{"Name":"VIVA TELE","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiJ2Mi56b3BpbS5jb20iLCJhaWQiOiIwIiwiaG9zdCI6InYycmF5Lmplbmtlbi12cG4uY29tIiwiaWQiOiI3YzlkNDE3Ni01YWI4LTExZWMtYjc5OS0yNDE0ODgyNDJhZGQiLCJuZXQiOiJ3cyIsInBhdGgiOiIvOHdXZEJIbVUvIiwicG9ydCI6IjgwODAiLCJwcyI6IltWSVZBXSBbIPCfh6fwn4e0IFRFTEVFRFVDQUNJT04g8J+HqPCfh7EgXSIsInNjeSI6ImF1dG8iLCJzbmkiOiIiLCJ0bHMiOiIiLCJ0eXBlIjoiIiwidiI6IjIifQ=="},{"Name":"VIVA TELE","Flag":"us","vmess":"vmess:\/\/eyJhZGQiOiJ2Mi56b3BpbS5jb20iLCJhaWQiOiIwIiwiaG9zdCI6InYycmF5LjA3a2VubmV0aDA3Lnh5eiIsImlkIjoiOGE5MjE0OTEtMmE2Mi0xMWVjLTlkYjUtY2ViNjNhNmNjYjMzIiwibmV0Ijoid3MiLCJwYXRoIjoiL3pyWTVsREpLLyIsInBvcnQiOiI4MDgwIiwicHMiOiJbVklWQV0gWyDwn4en8J+HtCBURUxFRURVQ0FDSU9OIPCfh7rwn4e4IF0iLCJzY3kiOiJhdXRvIiwic25pIjoiIiwidGxzIjoiIiwidHlwZSI6IiIsInYiOiIyIn0="},{"Name":"TIGO SIN SALDO 🇬🇹","Flag":"us","vmess":"vmess:\/\/eyJhZGQiOiJ6b3BpbS5pbyIsImFpZCI6IjAiLCJob3N0IjoidjJyYXkuMDdrZW5uZXRoMDcueHl6IiwiaWQiOiI4YTkyMTQ5MS0yYTYyLTExZWMtOWRiNS1jZWI2M2E2Y2NiMzMiLCJuZXQiOiJ3cyIsInBhdGgiOiIvenJZNWxESksvIiwicG9ydCI6IjgwODAiLCJwcyI6IltUSUdPXSBbIPCfh6zwn4e5IFNJTiBTQUxETyDwn4e68J+HuCBdIiwic2N5IjoiYXV0byIsInNuaSI6IiIsInRscyI6IiIsInR5cGUiOiIiLCJ2IjoiMiJ9"},{"Name":"TIGO SIN SALDO 🇬🇹","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiJ6b3BpbS5pbyIsImFpZCI6IjAiLCJob3N0IjoidjJyYXkuamVua2VuLXZwbi5jb20iLCJpZCI6IjdjOWQ0MTc2LTVhYjgtMTFlYy1iNzk5LTI0MTQ4ODI0MmFkZCIsIm5ldCI6IndzIiwicGF0aCI6Ii84d1dkQkhtVS8iLCJwb3J0IjoiODA4MCIsInBzIjoiW1RJR09dIFsg8J+HrPCfh7kgU0lOIFNBTERPIPCfh6jwn4exIF0iLCJzY3kiOiJhdXRvIiwic25pIjoiIiwidGxzIjoiIiwidHlwZSI6IiIsInYiOiIyIn0="},{"Name":"CLARO SIN SALDO GUATEMALA ","Flag":"us","vmess":"vmess:\/\/eyJhZGQiOiJndC5taXNwYWdvc2NsYXJvLmNvbSIsImFpZCI6IjAiLCJob3N0IjoidjJyYXkuMDlrZW5uZXRoZnJlZS50ayIsImlkIjoiMGM1NDNmZDktMjg2Yy0xMWVjLWFmYTItYmU0Y2YzYmQ4ZjQzIiwibmV0Ijoid3MiLCJwYXRoIjoiL2IxSFRSbGFlLyIsInBvcnQiOiI0NDMiLCJwcyI6IltDTEFST10gWyDwn4es8J+HuSBTSU4gU0FMRE8g8J+HuvCfh7ggXSBbRl0g8J+PtyIsInNjeSI6ImF1dG8iLCJzbmkiOiJ2MnJheS4wOWtlbm5ldGhmcmVlLnRrIiwidGxzIjoidGxzIiwidHlwZSI6IiIsInYiOiIyIn0="},{"Name":"CLARO SIN SALDO HONDURAS","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiJoci5taXNwYWdvc2NsYXJvLmNvbSIsImFpZCI6IjAiLCJob3N0IjoidjJyYXkuMDdrZW5uZXRoZnJvbnQudGsiLCJpZCI6ImVmMTJjNjQ2LTVlMzEtMTFlYy04ZDZhLTI0MTQ4OGQ1ZWI0NiIsIm5ldCI6IndzIiwicGF0aCI6Ii9EbWY3Y0psVS8iLCJwb3J0IjoiNDQzIiwicHMiOiJbQ0xBUk9dIFsg8J+HrfCfh7MgU0lOIFNBTERPIPCfh6jwn4exIF0iLCJzY3kiOiJhdXRvIiwic25pIjoidjJyYXkuMDdrZW5uZXRoZnJvbnQudGsiLCJ0bHMiOiJ0bHMiLCJ0eXBlIjoiIiwidiI6IjIifQ=="},{"Name":"TIGO SIN SALDO LENTO","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiIxNjIuMjQ3LjI0My4xNDciLCJhaWQiOiIwIiwiaG9zdCI6InYycmF5Lmplbmtlbi12cG4uY29tIiwiaWQiOiI3YzlkNDE3Ni01YWI4LTExZWMtYjc5OS0yNDE0ODgyNDJhZGQiLCJuZXQiOiJ3cyIsInBhdGgiOiIvOHdXZEJIbVUvIiwicG9ydCI6IjgwODAiLCJwcyI6IltUSUdPXSBbIPCfh6fwn4e0IFNJTiBTQUxETyBMRU5UTyDwn4eo8J+HsSBdIiwic2N5IjoiYXV0byIsInNuaSI6IiIsInRscyI6IiIsInR5cGUiOiIiLCJ2IjoiMiJ9"},{"Name":"TIGO SIN SALDO LENTO","Flag":"us","vmess":"vmess:\/\/eyJhZGQiOiIxNjIuMjQ3LjI0My4xNDciLCJhaWQiOiIwIiwiaG9zdCI6InYycmF5LjA3a2VubmV0aDA3Lnh5eiIsImlkIjoiOGE5MjE0OTEtMmE2Mi0xMWVjLTlkYjUtY2ViNjNhNmNjYjMzIiwibmV0Ijoid3MiLCJwYXRoIjoiL3pyWTVsREpLLyIsInBvcnQiOiI4MDgwIiwicHMiOiJbVElHT10gWyDwn4en8J+HtCBTSU4gU0FMRE8gTEVOVE8g8J+HuvCfh7ggXSIsInNjeSI6ImF1dG8iLCJzbmkiOiIiLCJ0bHMiOiIiLCJ0eXBlIjoiIiwidiI6IjIifQ=="},{"Name":"TIGO TELEEDUCACION","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiJzdDMuem9vbS51cyIsImFpZCI6IjAiLCJob3N0IjoidjJyYXkuMDdrZW5uZXRoZnJvbnQudGsiLCJpZCI6ImVmMTJjNjQ2LTVlMzEtMTFlYy04ZDZhLTI0MTQ4OGQ1ZWI0NiIsIm5ldCI6IndzIiwicGF0aCI6Ii9EbWY3Y0psVS8iLCJwb3J0IjoiNDQzIiwicHMiOiJbVElHT10gWyDwn4en8J+HtCBURUxFRURVQ0FDSU9OIPCfh6jwn4exIF0iLCJzY3kiOiJhdXRvIiwic25pIjoidjJyYXkuMDdrZW5uZXRoZnJvbnQudGsiLCJ0bHMiOiJ0bHMiLCJ0eXBlIjoiIiwidiI6IjIifQ=="},{"Name":"VIVA TWITTER BO","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiJnbG9iYWwuYWxidGxzLnQuY28iLCJhaWQiOiIwIiwiaG9zdCI6InYycmF5LjA3a2VubmV0aGZyb250LnRrIiwiaWQiOiJlZjEyYzY0Ni01ZTMxLTExZWMtOGQ2YS0yNDE0ODhkNWViNDYiLCJuZXQiOiJ3cyIsInBhdGgiOiIvRG1mN2NKbFUvIiwicG9ydCI6IjQ0MyIsInBzIjoiW1ZJVkFdIFsg8J+Hp\/Cfh7QgVFdJVFRFUiDwn4eo8J+HsSBdIiwic2N5IjoiYXV0byIsInNuaSI6InYycmF5LjA3a2VubmV0aGZyb250LnRrIiwidGxzIjoidGxzIiwidHlwZSI6IiIsInYiOiIyIn0="},{"Name":"VIVA TWITTER 2","Flag":"cl","vmess":"vmess:\/\/eyJhZGQiOiIxMDQuMjEuMi41NCIsImFpZCI6IjAiLCJob3N0IjoidjJyYXkuamVua2VuLXZwbi5jb20iLCJpZCI6IjdjOWQ0MTc2LTVhYjgtMTFlYy1iNzk5LTI0MTQ4ODI0MmFkZCIsIm5ldCI6IndzIiwicGF0aCI6Ii84d1dkQkhtVS8iLCJwb3J0IjoiODA4MCIsInBzIjoiW1ZJVkFdIFsg8J+Hp\/Cfh7QgVFdJVFRFUiAyIPCfh6jwn4exIF0iLCJzY3kiOiJhdXRvIiwic25pIjoiIiwidGxzIjoiIiwidHlwZSI6IiIsInYiOiIyIn0="}]
